// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ogrenci.proto

package ogrenci

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ogrenci struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	SurName              string   `protobuf:"bytes,3,opt,name=SurName,proto3" json:"SurName,omitempty"`
	Number               int32    `protobuf:"varint,4,opt,name=Number,proto3" json:"Number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ogrenci) Reset()         { *m = Ogrenci{} }
func (m *Ogrenci) String() string { return proto.CompactTextString(m) }
func (*Ogrenci) ProtoMessage()    {}
func (*Ogrenci) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrenci_b4d165277578de3a, []int{0}
}
func (m *Ogrenci) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ogrenci.Unmarshal(m, b)
}
func (m *Ogrenci) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ogrenci.Marshal(b, m, deterministic)
}
func (dst *Ogrenci) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ogrenci.Merge(dst, src)
}
func (m *Ogrenci) XXX_Size() int {
	return xxx_messageInfo_Ogrenci.Size(m)
}
func (m *Ogrenci) XXX_DiscardUnknown() {
	xxx_messageInfo_Ogrenci.DiscardUnknown(m)
}

var xxx_messageInfo_Ogrenci proto.InternalMessageInfo

func (m *Ogrenci) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Ogrenci) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ogrenci) GetSurName() string {
	if m != nil {
		return m.SurName
	}
	return ""
}

func (m *Ogrenci) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type OgrenciID struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OgrenciID) Reset()         { *m = OgrenciID{} }
func (m *OgrenciID) String() string { return proto.CompactTextString(m) }
func (*OgrenciID) ProtoMessage()    {}
func (*OgrenciID) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrenci_b4d165277578de3a, []int{1}
}
func (m *OgrenciID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OgrenciID.Unmarshal(m, b)
}
func (m *OgrenciID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OgrenciID.Marshal(b, m, deterministic)
}
func (dst *OgrenciID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OgrenciID.Merge(dst, src)
}
func (m *OgrenciID) XXX_Size() int {
	return xxx_messageInfo_OgrenciID.Size(m)
}
func (m *OgrenciID) XXX_DiscardUnknown() {
	xxx_messageInfo_OgrenciID.DiscardUnknown(m)
}

var xxx_messageInfo_OgrenciID proto.InternalMessageInfo

func (m *OgrenciID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type OgrenciRequest struct {
	Ogrenci              *Ogrenci `protobuf:"bytes,1,opt,name=ogrenci,proto3" json:"ogrenci,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OgrenciRequest) Reset()         { *m = OgrenciRequest{} }
func (m *OgrenciRequest) String() string { return proto.CompactTextString(m) }
func (*OgrenciRequest) ProtoMessage()    {}
func (*OgrenciRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrenci_b4d165277578de3a, []int{2}
}
func (m *OgrenciRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OgrenciRequest.Unmarshal(m, b)
}
func (m *OgrenciRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OgrenciRequest.Marshal(b, m, deterministic)
}
func (dst *OgrenciRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OgrenciRequest.Merge(dst, src)
}
func (m *OgrenciRequest) XXX_Size() int {
	return xxx_messageInfo_OgrenciRequest.Size(m)
}
func (m *OgrenciRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OgrenciRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OgrenciRequest proto.InternalMessageInfo

func (m *OgrenciRequest) GetOgrenci() *Ogrenci {
	if m != nil {
		return m.Ogrenci
	}
	return nil
}

type OgrenciReply struct {
	Ogrenci              *Ogrenci `protobuf:"bytes,1,opt,name=ogrenci,proto3" json:"ogrenci,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OgrenciReply) Reset()         { *m = OgrenciReply{} }
func (m *OgrenciReply) String() string { return proto.CompactTextString(m) }
func (*OgrenciReply) ProtoMessage()    {}
func (*OgrenciReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrenci_b4d165277578de3a, []int{3}
}
func (m *OgrenciReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OgrenciReply.Unmarshal(m, b)
}
func (m *OgrenciReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OgrenciReply.Marshal(b, m, deterministic)
}
func (dst *OgrenciReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OgrenciReply.Merge(dst, src)
}
func (m *OgrenciReply) XXX_Size() int {
	return xxx_messageInfo_OgrenciReply.Size(m)
}
func (m *OgrenciReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OgrenciReply.DiscardUnknown(m)
}

var xxx_messageInfo_OgrenciReply proto.InternalMessageInfo

func (m *OgrenciReply) GetOgrenci() *Ogrenci {
	if m != nil {
		return m.Ogrenci
	}
	return nil
}

type OgrenciListReply struct {
	Ogrenci              []*Ogrenci `protobuf:"bytes,1,rep,name=ogrenci,proto3" json:"ogrenci,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *OgrenciListReply) Reset()         { *m = OgrenciListReply{} }
func (m *OgrenciListReply) String() string { return proto.CompactTextString(m) }
func (*OgrenciListReply) ProtoMessage()    {}
func (*OgrenciListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrenci_b4d165277578de3a, []int{4}
}
func (m *OgrenciListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OgrenciListReply.Unmarshal(m, b)
}
func (m *OgrenciListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OgrenciListReply.Marshal(b, m, deterministic)
}
func (dst *OgrenciListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OgrenciListReply.Merge(dst, src)
}
func (m *OgrenciListReply) XXX_Size() int {
	return xxx_messageInfo_OgrenciListReply.Size(m)
}
func (m *OgrenciListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OgrenciListReply.DiscardUnknown(m)
}

var xxx_messageInfo_OgrenciListReply proto.InternalMessageInfo

func (m *OgrenciListReply) GetOgrenci() []*Ogrenci {
	if m != nil {
		return m.Ogrenci
	}
	return nil
}

func init() {
	proto.RegisterType((*Ogrenci)(nil), "ogrenci.Ogrenci")
	proto.RegisterType((*OgrenciID)(nil), "ogrenci.OgrenciID")
	proto.RegisterType((*OgrenciRequest)(nil), "ogrenci.OgrenciRequest")
	proto.RegisterType((*OgrenciReply)(nil), "ogrenci.OgrenciReply")
	proto.RegisterType((*OgrenciListReply)(nil), "ogrenci.OgrenciListReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OgrenciHubClient is the client API for OgrenciHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OgrenciHubClient interface {
	GetOgrenciAll(ctx context.Context, in *OgrenciID, opts ...grpc.CallOption) (*OgrenciListReply, error)
	GetOgrenciByID(ctx context.Context, in *OgrenciID, opts ...grpc.CallOption) (*OgrenciReply, error)
	InsertOgrenci(ctx context.Context, in *OgrenciRequest, opts ...grpc.CallOption) (*OgrenciReply, error)
	UpdateOgrenci(ctx context.Context, in *OgrenciRequest, opts ...grpc.CallOption) (*OgrenciReply, error)
	DeleteOgrenciByID(ctx context.Context, in *OgrenciID, opts ...grpc.CallOption) (*OgrenciReply, error)
}

type ogrenciHubClient struct {
	cc *grpc.ClientConn
}

func NewOgrenciHubClient(cc *grpc.ClientConn) OgrenciHubClient {
	return &ogrenciHubClient{cc}
}

func (c *ogrenciHubClient) GetOgrenciAll(ctx context.Context, in *OgrenciID, opts ...grpc.CallOption) (*OgrenciListReply, error) {
	out := new(OgrenciListReply)
	err := c.cc.Invoke(ctx, "/ogrenci.OgrenciHub/GetOgrenciAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ogrenciHubClient) GetOgrenciByID(ctx context.Context, in *OgrenciID, opts ...grpc.CallOption) (*OgrenciReply, error) {
	out := new(OgrenciReply)
	err := c.cc.Invoke(ctx, "/ogrenci.OgrenciHub/GetOgrenciByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ogrenciHubClient) InsertOgrenci(ctx context.Context, in *OgrenciRequest, opts ...grpc.CallOption) (*OgrenciReply, error) {
	out := new(OgrenciReply)
	err := c.cc.Invoke(ctx, "/ogrenci.OgrenciHub/InsertOgrenci", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ogrenciHubClient) UpdateOgrenci(ctx context.Context, in *OgrenciRequest, opts ...grpc.CallOption) (*OgrenciReply, error) {
	out := new(OgrenciReply)
	err := c.cc.Invoke(ctx, "/ogrenci.OgrenciHub/UpdateOgrenci", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ogrenciHubClient) DeleteOgrenciByID(ctx context.Context, in *OgrenciID, opts ...grpc.CallOption) (*OgrenciReply, error) {
	out := new(OgrenciReply)
	err := c.cc.Invoke(ctx, "/ogrenci.OgrenciHub/DeleteOgrenciByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OgrenciHubServer is the server API for OgrenciHub service.
type OgrenciHubServer interface {
	GetOgrenciAll(context.Context, *OgrenciID) (*OgrenciListReply, error)
	GetOgrenciByID(context.Context, *OgrenciID) (*OgrenciReply, error)
	InsertOgrenci(context.Context, *OgrenciRequest) (*OgrenciReply, error)
	UpdateOgrenci(context.Context, *OgrenciRequest) (*OgrenciReply, error)
	DeleteOgrenciByID(context.Context, *OgrenciID) (*OgrenciReply, error)
}

func RegisterOgrenciHubServer(s *grpc.Server, srv OgrenciHubServer) {
	s.RegisterService(&_OgrenciHub_serviceDesc, srv)
}

func _OgrenciHub_GetOgrenciAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OgrenciID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OgrenciHubServer).GetOgrenciAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ogrenci.OgrenciHub/GetOgrenciAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OgrenciHubServer).GetOgrenciAll(ctx, req.(*OgrenciID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OgrenciHub_GetOgrenciByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OgrenciID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OgrenciHubServer).GetOgrenciByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ogrenci.OgrenciHub/GetOgrenciByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OgrenciHubServer).GetOgrenciByID(ctx, req.(*OgrenciID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OgrenciHub_InsertOgrenci_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OgrenciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OgrenciHubServer).InsertOgrenci(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ogrenci.OgrenciHub/InsertOgrenci",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OgrenciHubServer).InsertOgrenci(ctx, req.(*OgrenciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OgrenciHub_UpdateOgrenci_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OgrenciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OgrenciHubServer).UpdateOgrenci(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ogrenci.OgrenciHub/UpdateOgrenci",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OgrenciHubServer).UpdateOgrenci(ctx, req.(*OgrenciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OgrenciHub_DeleteOgrenciByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OgrenciID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OgrenciHubServer).DeleteOgrenciByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ogrenci.OgrenciHub/DeleteOgrenciByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OgrenciHubServer).DeleteOgrenciByID(ctx, req.(*OgrenciID))
	}
	return interceptor(ctx, in, info, handler)
}

var _OgrenciHub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ogrenci.OgrenciHub",
	HandlerType: (*OgrenciHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOgrenciAll",
			Handler:    _OgrenciHub_GetOgrenciAll_Handler,
		},
		{
			MethodName: "GetOgrenciByID",
			Handler:    _OgrenciHub_GetOgrenciByID_Handler,
		},
		{
			MethodName: "InsertOgrenci",
			Handler:    _OgrenciHub_InsertOgrenci_Handler,
		},
		{
			MethodName: "UpdateOgrenci",
			Handler:    _OgrenciHub_UpdateOgrenci_Handler,
		},
		{
			MethodName: "DeleteOgrenciByID",
			Handler:    _OgrenciHub_DeleteOgrenciByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ogrenci.proto",
}

func init() { proto.RegisterFile("ogrenci.proto", fileDescriptor_ogrenci_b4d165277578de3a) }

var fileDescriptor_ogrenci_b4d165277578de3a = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4f, 0x2f, 0x4a,
	0xcd, 0x4b, 0xce, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xe2, 0xb9,
	0xd8, 0xfd, 0x21, 0x4c, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6,
	0x20, 0xa6, 0xcc, 0x14, 0x21, 0x21, 0x2e, 0x16, 0xbf, 0xc4, 0xdc, 0x54, 0x09, 0x26, 0x05, 0x46,
	0x0d, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x82, 0x8b, 0x3d, 0xb8, 0xb4, 0x08, 0x2c, 0xcc, 0x0c, 0x16,
	0x86, 0x71, 0x85, 0xc4, 0xb8, 0xd8, 0xfc, 0x4a, 0x73, 0x93, 0x52, 0x8b, 0x24, 0x58, 0xc0, 0x26,
	0x40, 0x79, 0x4a, 0xd2, 0x5c, 0x9c, 0x50, 0x0b, 0x3c, 0x5d, 0xd0, 0xad, 0x50, 0xb2, 0xe1, 0xe2,
	0x83, 0x4a, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x69, 0x71, 0xc1, 0x9c, 0x06, 0x56,
	0xc6, 0x6d, 0x24, 0xa0, 0x07, 0x73, 0x39, 0x4c, 0x25, 0xdc, 0xed, 0x56, 0x5c, 0x3c, 0x70, 0xdd,
	0x05, 0x39, 0x95, 0x24, 0xe9, 0xb5, 0xe3, 0x12, 0x80, 0x8a, 0xf9, 0x64, 0x16, 0x97, 0x60, 0xd1,
	0xcf, 0x8c, 0x57, 0xbf, 0xd1, 0x55, 0x26, 0x2e, 0x2e, 0xa8, 0xa0, 0x47, 0x69, 0x92, 0x90, 0x03,
	0x17, 0xaf, 0x7b, 0x6a, 0x09, 0x54, 0xc0, 0x31, 0x27, 0x47, 0x48, 0x08, 0x5d, 0xab, 0xa7, 0x8b,
	0x94, 0x24, 0xba, 0x18, 0xdc, 0x6a, 0x25, 0x06, 0x21, 0x5b, 0x2e, 0x3e, 0x84, 0x09, 0x4e, 0x95,
	0x9e, 0x2e, 0x58, 0x8d, 0x10, 0xc5, 0x70, 0x11, 0x54, 0xbb, 0x23, 0x17, 0xaf, 0x67, 0x5e, 0x71,
	0x6a, 0x11, 0xcc, 0x04, 0x21, 0x71, 0x4c, 0x95, 0xe0, 0x10, 0xc6, 0x6b, 0x44, 0x68, 0x41, 0x4a,
	0x62, 0x49, 0x2a, 0xf9, 0x46, 0x38, 0x70, 0x09, 0xba, 0xa4, 0xe6, 0xa4, 0xc2, 0x8d, 0x20, 0xd9,
	0x1f, 0x49, 0x6c, 0xe0, 0xf4, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x05, 0x89, 0x4b,
	0xb0, 0x02, 0x00, 0x00,
}
